2023-07-25 08:36:34.198 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Starting ReactToyServerApplication using Java 17.0.3 with PID 688 (C:\projects\ReactToyServer\target\classes started by ocean in C:\projects\ReactToyServer)
2023-07-25 08:36:34.406 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - No active profile set, falling back to 1 default profile: "default"
2023-07-25 08:36:35.642 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8080 (http)
2023-07-25 08:36:35.651 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8080"]
2023-07-25 08:36:35.663 INFO  [main] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-25 08:36:35.663 INFO  [main] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.10]
2023-07-25 08:36:35.834 INFO  [main] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-25 08:36:35.834 INFO  [main] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1393 ms
2023-07-25 08:36:36.644 INFO  [main] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@37b01ce2, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1a88c4f5, org.springframework.security.web.context.SecurityContextHolderFilter@8f2e3e6, org.springframework.security.web.header.HeaderWriterFilter@61a87366, org.springframework.web.filter.CorsFilter@1894fa9f, org.springframework.security.web.authentication.logout.LogoutFilter@159ac15f, kr.co.ocean.jwt.JwtAuthenticationFilter@1144a02b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6c8efde4, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@45e140ae, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@26a4f9ed, org.springframework.security.web.session.SessionManagementFilter@388be5fd, org.springframework.security.web.access.ExceptionTranslationFilter@259287ac, org.springframework.security.web.access.intercept.AuthorizationFilter@49cc9b2a]
2023-07-25 08:36:36.928 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8080"]
2023-07-25 08:36:36.986 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8080 (http) with context path ''
2023-07-25 08:36:37.105 INFO  [main] [o.a.k.clients.consumer.ConsumerConfig] - ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.include.jmx.reporter = true
	auto.offset.reset = latest
	bootstrap.servers = [127.0.0.1:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-springBoot-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = springBoot
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.springframework.kafka.support.serializer.JsonDeserializer

2023-07-25 08:36:37.184 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 08:36:37.185 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 08:36:37.185 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690241797183
2023-07-25 08:36:37.189 INFO  [main] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Subscribed to topic(s): springBoot
2023-07-25 08:36:37.201 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Started ReactToyServerApplication in 3.416 seconds (process running for 3.872)
2023-07-25 08:36:37.359 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Node -1 disconnected.
2023-07-25 08:36:37.360 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Connection to node -1 (/127.0.0.1:9092) could not be established. Broker may not be available.
2023-07-25 08:36:37.361 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Bootstrap broker 127.0.0.1:9092 (id: -1 rack: null) disconnected
2023-07-25 08:36:37.468 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Node -1 disconnected.
2023-07-25 08:36:37.469 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Connection to node -1 (/127.0.0.1:9092) could not be established. Broker may not be available.
2023-07-25 08:36:37.469 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Bootstrap broker 127.0.0.1:9092 (id: -1 rack: null) disconnected
2023-07-25 08:36:37.579 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Node -1 disconnected.
2023-07-25 08:36:37.579 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Connection to node -1 (/127.0.0.1:9092) could not be established. Broker may not be available.
2023-07-25 08:36:37.579 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Bootstrap broker 127.0.0.1:9092 (id: -1 rack: null) disconnected
2023-07-25 08:36:37.808 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Node -1 disconnected.
2023-07-25 08:36:37.808 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Connection to node -1 (/127.0.0.1:9092) could not be established. Broker may not be available.
2023-07-25 08:36:37.808 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Bootstrap broker 127.0.0.1:9092 (id: -1 rack: null) disconnected
2023-07-25 08:36:38.162 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Node -1 disconnected.
2023-07-25 08:36:38.163 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Connection to node -1 (/127.0.0.1:9092) could not be established. Broker may not be available.
2023-07-25 08:36:38.163 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Bootstrap broker 127.0.0.1:9092 (id: -1 rack: null) disconnected
2023-07-25 08:36:39.014 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Node -1 disconnected.
2023-07-25 08:36:39.015 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Connection to node -1 (/127.0.0.1:9092) could not be established. Broker may not be available.
2023-07-25 08:36:39.015 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Bootstrap broker 127.0.0.1:9092 (id: -1 rack: null) disconnected
2023-07-25 08:36:40.107 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Node -1 disconnected.
2023-07-25 08:36:40.107 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Connection to node -1 (/127.0.0.1:9092) could not be established. Broker may not be available.
2023-07-25 08:36:40.107 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Bootstrap broker 127.0.0.1:9092 (id: -1 rack: null) disconnected
2023-07-25 08:36:41.162 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Node -1 disconnected.
2023-07-25 08:36:41.162 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Connection to node -1 (/127.0.0.1:9092) could not be established. Broker may not be available.
2023-07-25 08:36:41.162 WARN  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Bootstrap broker 127.0.0.1:9092 (id: -1 rack: null) disconnected
2023-07-25 08:36:41.605 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-25 08:36:41.609 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 08:36:41.609 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 08:36:41.609 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Unsubscribed all topics or patterns and assigned partitions
2023-07-25 08:36:41.609 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 08:36:41.609 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 08:36:41.610 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 08:36:41.610 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 08:36:41.610 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 08:36:41.612 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.consumer for consumer-springBoot-1 unregistered
2023-07-25 08:36:41.613 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: Consumer stopped
2023-07-25 08:36:41.720 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Pausing ProtocolHandler ["http-nio-8080"]
2023-07-25 08:36:41.720 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.apache.catalina.core.StandardService] - Stopping service [Tomcat]
2023-07-25 08:36:41.757 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Stopping ProtocolHandler ["http-nio-8080"]
2023-07-25 08:52:21.255 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Starting ReactToyServerApplication using Java 17.0.3 with PID 5080 (C:\projects\ReactToyServer\target\classes started by ocean in C:\projects\ReactToyServer)
2023-07-25 08:52:21.257 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - No active profile set, falling back to 1 default profile: "default"
2023-07-25 08:52:22.119 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8080 (http)
2023-07-25 08:52:22.123 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8080"]
2023-07-25 08:52:22.125 INFO  [main] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-25 08:52:22.125 INFO  [main] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.10]
2023-07-25 08:52:22.202 INFO  [main] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-25 08:52:22.202 INFO  [main] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 912 ms
2023-07-25 08:52:22.619 INFO  [main] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6befbb12, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@21d9cd04, org.springframework.security.web.context.SecurityContextHolderFilter@10e9a5fe, org.springframework.security.web.header.HeaderWriterFilter@59328218, org.springframework.web.filter.CorsFilter@799f354a, org.springframework.security.web.authentication.logout.LogoutFilter@46612bfc, kr.co.ocean.jwt.JwtAuthenticationFilter@33bdd01, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1abcd059, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@716f94c1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@159ac15f, org.springframework.security.web.session.SessionManagementFilter@6afbe6a1, org.springframework.security.web.access.ExceptionTranslationFilter@734ce281, org.springframework.security.web.access.intercept.AuthorizationFilter@514377fc]
2023-07-25 08:52:22.795 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8080"]
2023-07-25 08:52:22.806 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8080 (http) with context path ''
2023-07-25 08:52:22.836 INFO  [main] [o.a.k.clients.consumer.ConsumerConfig] - ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.include.jmx.reporter = true
	auto.offset.reset = latest
	bootstrap.servers = [127.0.0.1:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-springBoot-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = springBoot
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.springframework.kafka.support.serializer.JsonDeserializer

2023-07-25 08:52:22.891 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 08:52:22.892 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 08:52:22.892 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690242742890
2023-07-25 08:52:22.894 INFO  [main] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Subscribed to topic(s): springBoot
2023-07-25 08:52:22.905 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Started ReactToyServerApplication in 2.004 seconds (process running for 3.373)
2023-07-25 08:52:23.103 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 08:52:23.104 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 08:52:23.105 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Discovered group coordinator 127.0.0.1:9092 (id: 2147483647 rack: null)
2023-07-25 08:52:23.107 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 08:52:23.116 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: need to re-join with the given member-id: consumer-springBoot-1-2e84c96e-d913-4d59-9c31-ee5992ded25d
2023-07-25 08:52:23.116 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: rebalance failed due to 'The group member needs to have a valid member id before actually entering a consumer group.' (MemberIdRequiredException)
2023-07-25 08:52:23.116 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 08:52:23.119 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully joined group with generation Generation{generationId=64, memberId='consumer-springBoot-1-2e84c96e-d913-4d59-9c31-ee5992ded25d', protocol='range'}
2023-07-25 08:52:23.121 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Finished assignment for group at generation 64: {consumer-springBoot-1-2e84c96e-d913-4d59-9c31-ee5992ded25d=Assignment(partitions=[springBoot-0])}
2023-07-25 08:52:23.126 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully synced group in generation Generation{generationId=64, memberId='consumer-springBoot-1-2e84c96e-d913-4d59-9c31-ee5992ded25d', protocol='range'}
2023-07-25 08:52:23.127 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Notifying assignor about the new Assignment(partitions=[springBoot-0])
2023-07-25 08:52:23.130 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Adding newly assigned partitions: springBoot-0
2023-07-25 08:52:23.139 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Setting offset for partition springBoot-0 to the committed offset FetchPosition{offset=165, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 0 rack: null)], epoch=0}}
2023-07-25 08:52:23.140 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions assigned: [springBoot-0]
2023-07-25 08:52:27.529 INFO  [http-nio-8080-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-25 08:52:27.530 INFO  [http-nio-8080-exec-1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-25 08:52:27.530 INFO  [http-nio-8080-exec-1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 0 ms
2023-07-25 08:52:27.587 INFO  [http-nio-8080-exec-1] [o.a.k.clients.producer.ProducerConfig] - ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = [127.0.0.1:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.springframework.kafka.support.serializer.JsonSerializer

2023-07-25 08:52:27.594 INFO  [http-nio-8080-exec-1] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-07-25 08:52:27.604 INFO  [http-nio-8080-exec-1] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 08:52:27.604 INFO  [http-nio-8080-exec-1] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 08:52:27.604 INFO  [http-nio-8080-exec-1] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690242747604
2023-07-25 08:52:27.609 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 08:52:27.609 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 08:52:27.629 INFO  [kafka-producer-network-thread | producer-1] [o.a.k.c.p.internals.TransactionManager] - [Producer clientId=producer-1] ProducerId set to 3000 with epoch 0
2023-07-25 08:52:27.657 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 165, CreateTime = 1690242747609, serialized key size = 12, serialized value size = 15, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@5b6e9b7)
2023-07-25 08:52:27.657 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 08:52:27.657 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 08:52:27.657 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 08:55:54.229 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 166, CreateTime = 1690242954224, serialized key size = 12, serialized value size = 15, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@6235bfa7)
2023-07-25 08:55:54.230 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 08:55:54.230 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 08:55:54.230 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 08:57:56.692 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 167, CreateTime = 1690243076688, serialized key size = 12, serialized value size = 15, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@248d980a)
2023-07-25 08:57:56.692 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 08:57:56.692 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 08:57:56.692 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 09:01:23.579 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Node -1 disconnected.
2023-07-25 09:01:56.753 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.NetworkClient] - [Producer clientId=producer-1] Node -1 disconnected.
2023-07-25 09:04:06.163 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 168, CreateTime = 1690243446159, serialized key size = 12, serialized value size = 15, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@29a21460)
2023-07-25 09:04:06.163 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 09:04:06.163 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 09:04:06.163 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 09:07:42.946 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 169, CreateTime = 1690243662942, serialized key size = 12, serialized value size = 15, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@412c4929)
2023-07-25 09:07:42.946 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 09:07:42.946 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 09:07:42.946 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 09:08:13.605 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 170, CreateTime = 1690243693602, serialized key size = 12, serialized value size = 15, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@35331f72)
2023-07-25 09:08:13.605 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 09:08:13.605 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 09:08:13.605 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 09:18:47.744 INFO  [RMI TCP Connection(37)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-25 09:18:47.747 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Revoke previously assigned partitions springBoot-0
2023-07-25 09:18:47.747 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions revoked: [springBoot-0]
2023-07-25 09:18:47.748 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Member consumer-springBoot-1-2e84c96e-d913-4d59-9c31-ee5992ded25d sending LeaveGroup request to coordinator 127.0.0.1:9092 (id: 2147483647 rack: null) due to the consumer unsubscribed from all topics
2023-07-25 09:18:47.748 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 09:18:47.748 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 09:18:47.748 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Unsubscribed all topics or patterns and assigned partitions
2023-07-25 09:18:47.749 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 09:18:47.749 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 09:18:47.757 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 09:18:47.757 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 09:18:47.757 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 09:18:47.759 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.consumer for consumer-springBoot-1 unregistered
2023-07-25 09:18:47.759 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: Consumer stopped
2023-07-25 09:18:47.766 INFO  [RMI TCP Connection(37)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Pausing ProtocolHandler ["http-nio-8080"]
2023-07-25 09:18:47.766 INFO  [RMI TCP Connection(37)-127.0.0.1] [o.apache.catalina.core.StandardService] - Stopping service [Tomcat]
2023-07-25 09:18:47.767 INFO  [RMI TCP Connection(37)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2023-07-25 09:18:47.771 WARN  [RMI TCP Connection(37)-127.0.0.1] [o.a.c.loader.WebappClassLoaderBase] - The web application [ROOT] appears to have started a thread named [kafka-producer-network-thread | producer-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.3/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.3/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:141)
 app//org.apache.kafka.common.network.Selector.select(Selector.java:874)
 app//org.apache.kafka.common.network.Selector.poll(Selector.java:465)
 app//org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:560)
 app//org.apache.kafka.clients.producer.internals.Sender.runOnce(Sender.java:328)
 app//org.apache.kafka.clients.producer.internals.Sender.run(Sender.java:243)
 java.base@17.0.3/java.lang.Thread.run(Thread.java:833)
2023-07-25 09:18:47.772 INFO  [RMI TCP Connection(37)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Stopping ProtocolHandler ["http-nio-8080"]
2023-07-25 09:18:47.774 INFO  [RMI TCP Connection(37)-127.0.0.1] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
2023-07-25 09:18:47.776 INFO  [RMI TCP Connection(37)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 09:18:47.776 INFO  [RMI TCP Connection(37)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 09:18:47.776 INFO  [RMI TCP Connection(37)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 09:18:47.776 INFO  [RMI TCP Connection(37)-127.0.0.1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.producer for producer-1 unregistered
2023-07-25 09:18:49.331 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Starting ReactToyServerApplication using Java 17.0.3 with PID 11988 (C:\projects\ReactToyServer\target\classes started by ocean in C:\projects\ReactToyServer)
2023-07-25 09:18:49.332 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - No active profile set, falling back to 1 default profile: "default"
2023-07-25 09:18:50.025 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8080 (http)
2023-07-25 09:18:50.030 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8080"]
2023-07-25 09:18:50.032 INFO  [main] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-25 09:18:50.032 INFO  [main] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.10]
2023-07-25 09:18:50.093 INFO  [main] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-25 09:18:50.094 INFO  [main] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 733 ms
2023-07-25 09:18:50.481 INFO  [main] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@28daf506, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4662752a, org.springframework.security.web.context.SecurityContextHolderFilter@164d01ba, org.springframework.security.web.header.HeaderWriterFilter@24197b13, org.springframework.web.filter.CorsFilter@693f2213, org.springframework.security.web.authentication.logout.LogoutFilter@2b441e56, kr.co.ocean.jwt.JwtAuthenticationFilter@514377fc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5ac044ef, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@10e9a5fe, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2e4eda17, org.springframework.security.web.session.SessionManagementFilter@760f1081, org.springframework.security.web.access.ExceptionTranslationFilter@2b7facc7, org.springframework.security.web.access.intercept.AuthorizationFilter@1cde374]
2023-07-25 09:18:50.657 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8080"]
2023-07-25 09:18:50.669 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8080 (http) with context path ''
2023-07-25 09:18:50.698 INFO  [main] [o.a.k.clients.consumer.ConsumerConfig] - ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.include.jmx.reporter = true
	auto.offset.reset = latest
	bootstrap.servers = [127.0.0.1:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-springBoot-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = springBoot
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.springframework.kafka.support.serializer.JsonDeserializer

2023-07-25 09:18:50.751 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 09:18:50.752 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 09:18:50.752 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690244330750
2023-07-25 09:18:50.755 INFO  [main] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Subscribed to topic(s): springBoot
2023-07-25 09:18:50.766 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Started ReactToyServerApplication in 1.778 seconds (process running for 2.122)
2023-07-25 09:18:50.961 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 09:18:50.962 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 09:18:50.964 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Discovered group coordinator 127.0.0.1:9092 (id: 2147483647 rack: null)
2023-07-25 09:18:50.965 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 09:18:50.974 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: need to re-join with the given member-id: consumer-springBoot-1-8d0f5a17-5419-4de5-899e-b003f53d443a
2023-07-25 09:18:50.974 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: rebalance failed due to 'The group member needs to have a valid member id before actually entering a consumer group.' (MemberIdRequiredException)
2023-07-25 09:18:50.974 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 09:18:50.976 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully joined group with generation Generation{generationId=66, memberId='consumer-springBoot-1-8d0f5a17-5419-4de5-899e-b003f53d443a', protocol='range'}
2023-07-25 09:18:50.978 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Finished assignment for group at generation 66: {consumer-springBoot-1-8d0f5a17-5419-4de5-899e-b003f53d443a=Assignment(partitions=[springBoot-0])}
2023-07-25 09:18:50.981 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully synced group in generation Generation{generationId=66, memberId='consumer-springBoot-1-8d0f5a17-5419-4de5-899e-b003f53d443a', protocol='range'}
2023-07-25 09:18:50.982 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Notifying assignor about the new Assignment(partitions=[springBoot-0])
2023-07-25 09:18:50.983 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Adding newly assigned partitions: springBoot-0
2023-07-25 09:18:50.990 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Setting offset for partition springBoot-0 to the committed offset FetchPosition{offset=171, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 0 rack: null)], epoch=0}}
2023-07-25 09:18:50.991 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions assigned: [springBoot-0]
2023-07-25 09:19:11.827 INFO  [http-nio-8080-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-25 09:19:11.827 INFO  [http-nio-8080-exec-1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-25 09:19:11.828 INFO  [http-nio-8080-exec-1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 1 ms
2023-07-25 09:19:11.880 INFO  [http-nio-8080-exec-1] [o.a.k.clients.producer.ProducerConfig] - ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = [127.0.0.1:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.springframework.kafka.support.serializer.JsonSerializer

2023-07-25 09:19:11.887 INFO  [http-nio-8080-exec-1] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-07-25 09:19:11.896 INFO  [http-nio-8080-exec-1] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 09:19:11.897 INFO  [http-nio-8080-exec-1] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 09:19:11.897 INFO  [http-nio-8080-exec-1] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690244351896
2023-07-25 09:19:11.900 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 09:19:11.901 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 09:19:11.901 INFO  [kafka-producer-network-thread | producer-1] [o.a.k.c.p.internals.TransactionManager] - [Producer clientId=producer-1] ProducerId set to 3001 with epoch 0
2023-07-25 09:19:11.930 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 171, CreateTime = 1690244351901, serialized key size = 12, serialized value size = 46, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@26940d9f)
2023-07-25 09:19:11.930 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 09:19:11.930 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 09:19:11.930 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 09:25:23.518 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 172, CreateTime = 1690244723514, serialized key size = 12, serialized value size = 46, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@364704d3)
2023-07-25 09:25:23.518 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 09:25:23.518 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 09:25:23.519 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 09:27:51.031 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Node -1 disconnected.
2023-07-25 09:28:23.563 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.NetworkClient] - [Producer clientId=producer-1] Node -1 disconnected.
2023-07-25 10:03:24.839 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 10:03:24.843 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 173, CreateTime = 1690247004840, serialized key size = 12, serialized value size = 46, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@5b9ded43)
2023-07-25 10:03:24.844 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:03:24.844 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:03:24.844 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:05:18.583 INFO  [RMI TCP Connection(55)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-25 10:05:18.587 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Revoke previously assigned partitions springBoot-0
2023-07-25 10:05:18.587 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions revoked: [springBoot-0]
2023-07-25 10:05:18.588 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Member consumer-springBoot-1-8d0f5a17-5419-4de5-899e-b003f53d443a sending LeaveGroup request to coordinator 127.0.0.1:9092 (id: 2147483647 rack: null) due to the consumer unsubscribed from all topics
2023-07-25 10:05:18.588 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 10:05:18.588 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 10:05:18.588 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Unsubscribed all topics or patterns and assigned partitions
2023-07-25 10:05:18.589 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 10:05:18.589 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 10:05:18.592 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 10:05:18.592 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 10:05:18.593 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 10:05:18.595 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.consumer for consumer-springBoot-1 unregistered
2023-07-25 10:05:18.596 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: Consumer stopped
2023-07-25 10:05:18.604 INFO  [RMI TCP Connection(55)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Pausing ProtocolHandler ["http-nio-8080"]
2023-07-25 10:05:18.604 INFO  [RMI TCP Connection(55)-127.0.0.1] [o.apache.catalina.core.StandardService] - Stopping service [Tomcat]
2023-07-25 10:05:18.605 INFO  [RMI TCP Connection(55)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2023-07-25 10:05:18.609 WARN  [RMI TCP Connection(55)-127.0.0.1] [o.a.c.loader.WebappClassLoaderBase] - The web application [ROOT] appears to have started a thread named [kafka-producer-network-thread | producer-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.3/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.3/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:141)
 app//org.apache.kafka.common.network.Selector.select(Selector.java:874)
 app//org.apache.kafka.common.network.Selector.poll(Selector.java:465)
 app//org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:560)
 app//org.apache.kafka.clients.producer.internals.Sender.runOnce(Sender.java:328)
 app//org.apache.kafka.clients.producer.internals.Sender.run(Sender.java:243)
 java.base@17.0.3/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:05:18.611 INFO  [RMI TCP Connection(55)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Stopping ProtocolHandler ["http-nio-8080"]
2023-07-25 10:05:18.613 INFO  [RMI TCP Connection(55)-127.0.0.1] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
2023-07-25 10:05:18.614 INFO  [RMI TCP Connection(55)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 10:05:18.614 INFO  [RMI TCP Connection(55)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 10:05:18.614 INFO  [RMI TCP Connection(55)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 10:05:18.614 INFO  [RMI TCP Connection(55)-127.0.0.1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.producer for producer-1 unregistered
2023-07-25 10:05:20.177 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Starting ReactToyServerApplication using Java 17.0.3 with PID 13848 (C:\projects\ReactToyServer\target\classes started by ocean in C:\projects\ReactToyServer)
2023-07-25 10:05:20.178 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - No active profile set, falling back to 1 default profile: "default"
2023-07-25 10:05:20.868 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8080 (http)
2023-07-25 10:05:20.873 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8080"]
2023-07-25 10:05:20.874 INFO  [main] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-25 10:05:20.875 INFO  [main] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.10]
2023-07-25 10:05:20.938 INFO  [main] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-25 10:05:20.938 INFO  [main] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 733 ms
2023-07-25 10:05:21.323 INFO  [main] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@159ac15f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7ac48f05, org.springframework.security.web.context.SecurityContextHolderFilter@3c33fcf8, org.springframework.security.web.header.HeaderWriterFilter@5345dfe8, org.springframework.web.filter.CorsFilter@7af1d072, org.springframework.security.web.authentication.logout.LogoutFilter@15369d73, kr.co.ocean.jwt.JwtAuthenticationFilter@27ffd9f8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@716f94c1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1d99ee1b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@642c6461, org.springframework.security.web.session.SessionManagementFilter@14457a95, org.springframework.security.web.access.ExceptionTranslationFilter@49b89425, org.springframework.security.web.access.intercept.AuthorizationFilter@21d9cd04]
2023-07-25 10:05:21.497 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8080"]
2023-07-25 10:05:21.509 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8080 (http) with context path ''
2023-07-25 10:05:21.538 INFO  [main] [o.a.k.clients.consumer.ConsumerConfig] - ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.include.jmx.reporter = true
	auto.offset.reset = latest
	bootstrap.servers = [127.0.0.1:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-springBoot-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = springBoot
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.springframework.kafka.support.serializer.JsonDeserializer

2023-07-25 10:05:21.592 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 10:05:21.593 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 10:05:21.593 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690247121591
2023-07-25 10:05:21.595 INFO  [main] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Subscribed to topic(s): springBoot
2023-07-25 10:05:21.605 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Started ReactToyServerApplication in 1.774 seconds (process running for 2.116)
2023-07-25 10:05:21.803 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 10:05:21.805 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 10:05:21.806 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Discovered group coordinator 127.0.0.1:9092 (id: 2147483647 rack: null)
2023-07-25 10:05:21.807 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 10:05:21.815 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: need to re-join with the given member-id: consumer-springBoot-1-79ee1608-b1b5-4d4a-b310-df16e432e497
2023-07-25 10:05:21.816 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: rebalance failed due to 'The group member needs to have a valid member id before actually entering a consumer group.' (MemberIdRequiredException)
2023-07-25 10:05:21.816 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 10:05:21.818 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully joined group with generation Generation{generationId=68, memberId='consumer-springBoot-1-79ee1608-b1b5-4d4a-b310-df16e432e497', protocol='range'}
2023-07-25 10:05:21.819 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Finished assignment for group at generation 68: {consumer-springBoot-1-79ee1608-b1b5-4d4a-b310-df16e432e497=Assignment(partitions=[springBoot-0])}
2023-07-25 10:05:21.823 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully synced group in generation Generation{generationId=68, memberId='consumer-springBoot-1-79ee1608-b1b5-4d4a-b310-df16e432e497', protocol='range'}
2023-07-25 10:05:21.823 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Notifying assignor about the new Assignment(partitions=[springBoot-0])
2023-07-25 10:05:21.825 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Adding newly assigned partitions: springBoot-0
2023-07-25 10:05:21.832 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Setting offset for partition springBoot-0 to the committed offset FetchPosition{offset=174, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 0 rack: null)], epoch=0}}
2023-07-25 10:05:21.832 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions assigned: [springBoot-0]
2023-07-25 10:06:04.378 INFO  [http-nio-8080-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-25 10:06:04.378 INFO  [http-nio-8080-exec-1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-25 10:06:04.379 INFO  [http-nio-8080-exec-1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 1 ms
2023-07-25 10:06:04.431 INFO  [http-nio-8080-exec-1] [o.a.k.clients.producer.ProducerConfig] - ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = [127.0.0.1:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.springframework.kafka.support.serializer.JsonSerializer

2023-07-25 10:06:04.438 INFO  [http-nio-8080-exec-1] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-07-25 10:06:04.448 INFO  [http-nio-8080-exec-1] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 10:06:04.448 INFO  [http-nio-8080-exec-1] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 10:06:04.448 INFO  [http-nio-8080-exec-1] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690247164448
2023-07-25 10:06:04.451 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 10:06:04.452 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 10:06:04.452 INFO  [kafka-producer-network-thread | producer-1] [o.a.k.c.p.internals.TransactionManager] - [Producer clientId=producer-1] ProducerId set to 3002 with epoch 0
2023-07-25 10:06:04.478 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 174, CreateTime = 1690247164452, serialized key size = 12, serialized value size = 50, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@26940d9f)
2023-07-25 10:06:04.479 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:06:04.479 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:06:04.479 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:13:24.893 INFO  [RMI TCP Connection(17)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-25 10:13:24.896 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Revoke previously assigned partitions springBoot-0
2023-07-25 10:13:24.897 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions revoked: [springBoot-0]
2023-07-25 10:13:24.897 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Member consumer-springBoot-1-79ee1608-b1b5-4d4a-b310-df16e432e497 sending LeaveGroup request to coordinator 127.0.0.1:9092 (id: 2147483647 rack: null) due to the consumer unsubscribed from all topics
2023-07-25 10:13:24.898 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 10:13:24.898 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 10:13:24.898 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Unsubscribed all topics or patterns and assigned partitions
2023-07-25 10:13:24.898 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 10:13:24.898 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 10:13:24.901 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 10:13:24.901 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 10:13:24.901 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 10:13:24.904 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.consumer for consumer-springBoot-1 unregistered
2023-07-25 10:13:24.905 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: Consumer stopped
2023-07-25 10:13:24.913 INFO  [RMI TCP Connection(17)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Pausing ProtocolHandler ["http-nio-8080"]
2023-07-25 10:13:24.913 INFO  [RMI TCP Connection(17)-127.0.0.1] [o.apache.catalina.core.StandardService] - Stopping service [Tomcat]
2023-07-25 10:13:24.914 INFO  [RMI TCP Connection(17)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2023-07-25 10:13:24.917 WARN  [RMI TCP Connection(17)-127.0.0.1] [o.a.c.loader.WebappClassLoaderBase] - The web application [ROOT] appears to have started a thread named [kafka-producer-network-thread | producer-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.3/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.3/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:141)
 app//org.apache.kafka.common.network.Selector.select(Selector.java:874)
 app//org.apache.kafka.common.network.Selector.poll(Selector.java:465)
 app//org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:560)
 app//org.apache.kafka.clients.producer.internals.Sender.runOnce(Sender.java:328)
 app//org.apache.kafka.clients.producer.internals.Sender.run(Sender.java:243)
 java.base@17.0.3/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:13:24.918 INFO  [RMI TCP Connection(17)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Stopping ProtocolHandler ["http-nio-8080"]
2023-07-25 10:13:24.922 INFO  [RMI TCP Connection(17)-127.0.0.1] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
2023-07-25 10:13:24.924 INFO  [RMI TCP Connection(17)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 10:13:24.924 INFO  [RMI TCP Connection(17)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 10:13:24.924 INFO  [RMI TCP Connection(17)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 10:13:24.924 INFO  [RMI TCP Connection(17)-127.0.0.1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.producer for producer-1 unregistered
2023-07-25 10:13:26.462 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Starting ReactToyServerApplication using Java 17.0.3 with PID 10120 (C:\projects\ReactToyServer\target\classes started by ocean in C:\projects\ReactToyServer)
2023-07-25 10:13:26.463 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - No active profile set, falling back to 1 default profile: "default"
2023-07-25 10:13:27.174 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8080 (http)
2023-07-25 10:13:27.179 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8080"]
2023-07-25 10:13:27.180 INFO  [main] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-25 10:13:27.181 INFO  [main] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.10]
2023-07-25 10:13:27.235 INFO  [main] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-25 10:13:27.237 INFO  [main] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 743 ms
2023-07-25 10:13:27.627 INFO  [main] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@642c6461, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3ace6346, org.springframework.security.web.context.SecurityContextHolderFilter@70091872, org.springframework.security.web.header.HeaderWriterFilter@401e02b4, org.springframework.web.filter.CorsFilter@4e48462d, org.springframework.security.web.authentication.logout.LogoutFilter@28daf506, kr.co.ocean.jwt.JwtAuthenticationFilter@17216605, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1d99ee1b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2e362407, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@10a907ec, org.springframework.security.web.session.SessionManagementFilter@dada335, org.springframework.security.web.access.ExceptionTranslationFilter@760f1081, org.springframework.security.web.access.intercept.AuthorizationFilter@7ac48f05]
2023-07-25 10:13:27.808 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8080"]
2023-07-25 10:13:27.820 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8080 (http) with context path ''
2023-07-25 10:13:27.847 INFO  [main] [o.a.k.clients.consumer.ConsumerConfig] - ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.include.jmx.reporter = true
	auto.offset.reset = latest
	bootstrap.servers = [127.0.0.1:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-springBoot-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = springBoot
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.springframework.kafka.support.serializer.JsonDeserializer

2023-07-25 10:13:27.901 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 10:13:27.902 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 10:13:27.902 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690247607900
2023-07-25 10:13:27.904 INFO  [main] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Subscribed to topic(s): springBoot
2023-07-25 10:13:27.914 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Started ReactToyServerApplication in 1.797 seconds (process running for 2.149)
2023-07-25 10:13:28.114 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 10:13:28.115 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 10:13:28.116 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Discovered group coordinator 127.0.0.1:9092 (id: 2147483647 rack: null)
2023-07-25 10:13:28.117 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 10:13:28.125 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: need to re-join with the given member-id: consumer-springBoot-1-d0c55e87-4841-49ea-a89f-c64470f012d2
2023-07-25 10:13:28.126 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: rebalance failed due to 'The group member needs to have a valid member id before actually entering a consumer group.' (MemberIdRequiredException)
2023-07-25 10:13:28.126 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 10:13:28.128 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully joined group with generation Generation{generationId=70, memberId='consumer-springBoot-1-d0c55e87-4841-49ea-a89f-c64470f012d2', protocol='range'}
2023-07-25 10:13:28.129 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Finished assignment for group at generation 70: {consumer-springBoot-1-d0c55e87-4841-49ea-a89f-c64470f012d2=Assignment(partitions=[springBoot-0])}
2023-07-25 10:13:28.132 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully synced group in generation Generation{generationId=70, memberId='consumer-springBoot-1-d0c55e87-4841-49ea-a89f-c64470f012d2', protocol='range'}
2023-07-25 10:13:28.133 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Notifying assignor about the new Assignment(partitions=[springBoot-0])
2023-07-25 10:13:28.134 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Adding newly assigned partitions: springBoot-0
2023-07-25 10:13:28.141 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Setting offset for partition springBoot-0 to the committed offset FetchPosition{offset=175, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 0 rack: null)], epoch=0}}
2023-07-25 10:13:28.141 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions assigned: [springBoot-0]
2023-07-25 10:13:48.835 INFO  [http-nio-8080-exec-2] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-25 10:13:48.835 INFO  [http-nio-8080-exec-2] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-25 10:13:48.836 INFO  [http-nio-8080-exec-2] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 1 ms
2023-07-25 10:13:48.893 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.TokenProvider] - 만료된 JWT 토큰입니다.
2023-07-25 10:13:48.893 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.TokenProvider] - 만료된 JWT 토큰입니다.
2023-07-25 10:13:48.895 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 재발급
2023-07-25 10:13:48.895 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 재발급
2023-07-25 10:13:48.926 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:13:48.926 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:13:48.951 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:13:48.951 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:13:48.960 INFO  [http-nio-8080-exec-5] [o.a.k.clients.producer.ProducerConfig] - ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = [127.0.0.1:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.springframework.kafka.support.serializer.JsonSerializer

2023-07-25 10:13:48.968 INFO  [http-nio-8080-exec-5] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-07-25 10:13:48.975 INFO  [http-nio-8080-exec-6] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Starting...
2023-07-25 10:13:48.978 INFO  [http-nio-8080-exec-5] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 10:13:48.978 INFO  [http-nio-8080-exec-5] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 10:13:48.978 INFO  [http-nio-8080-exec-5] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690247628978
2023-07-25 10:13:48.982 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 10:13:48.982 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 10:13:48.983 INFO  [kafka-producer-network-thread | producer-1] [o.a.k.c.p.internals.TransactionManager] - [Producer clientId=producer-1] ProducerId set to 3003 with epoch 0
2023-07-25 10:13:49.005 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 175, CreateTime = 1690247628983, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@178df22e)
2023-07-25 10:13:49.005 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:13:49.005 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:13:49.005 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:13:49.093 INFO  [http-nio-8080-exec-6] [com.zaxxer.hikari.pool.HikariPool] - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@768ce052
2023-07-25 10:13:49.094 INFO  [http-nio-8080-exec-6] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Start completed.
2023-07-25 10:13:51.346 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:13:51.347 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:13:51.348 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - {keyword=test, type=title, recode=0, perPageNum=10}
2023-07-25 10:13:51.348 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:13:51.352 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 176, CreateTime = 1690247631348, serialized key size = 12, serialized value size = 48, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@6a601598)
2023-07-25 10:13:51.353 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:13:51.353 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:13:51.353 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:14:04.579 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:14:04.579 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:14:04.580 INFO  [http-nio-8080-exec-1] [k.c.o.board.controller.BoardController] - {keyword=test1, type=title, recode=0, perPageNum=10}
2023-07-25 10:14:04.580 INFO  [http-nio-8080-exec-1] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:14:04.583 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 177, CreateTime = 1690247644580, serialized key size = 12, serialized value size = 49, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@2fb96101)
2023-07-25 10:14:04.584 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:14:04.584 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:14:04.584 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:15:30.075 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.TokenProvider] - 만료된 JWT 토큰입니다.
2023-07-25 10:15:30.075 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.TokenProvider] - 만료된 JWT 토큰입니다.
2023-07-25 10:15:30.076 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 재발급
2023-07-25 10:15:30.076 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 재발급
2023-07-25 10:15:30.087 INFO  [http-nio-8080-exec-9] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:15:30.087 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:15:30.088 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:15:30.088 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:15:30.092 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 178, CreateTime = 1690247730089, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@a063837)
2023-07-25 10:15:30.092 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:15:30.092 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:15:30.092 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:15:39.353 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:15:39.353 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:15:39.354 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - {keyword=ffff, type=title, recode=0, perPageNum=10}
2023-07-25 10:15:39.354 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:15:39.356 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 179, CreateTime = 1690247739354, serialized key size = 12, serialized value size = 48, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@6ed82246)
2023-07-25 10:15:39.357 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:15:39.357 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:15:39.357 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:15:39.363 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:15:39.363 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:15:39.364 INFO  [http-nio-8080-exec-7] [k.c.o.board.controller.BoardController] - {keyword=ffff, type=title, recode=-10, perPageNum=10}
2023-07-25 10:15:39.365 INFO  [http-nio-8080-exec-7] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:15:39.367 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 180, CreateTime = 1690247739365, serialized key size = 12, serialized value size = 48, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@47e36d0)
2023-07-25 10:15:39.367 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:15:39.367 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:15:39.367 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:15:39.413 ERROR [http-nio-8080-exec-7] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: 
### Error querying database.  Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
### The error may exist in file [C:\projects\ReactToyServer\target\classes\mybatis\sql\pg\board-mapper.xml]
### The error may involve kr.co.ocean.board.dao.BoardMapper.selectPagingBoards-Inline
### The error occurred while setting parameters
### SQL: select code        , title     , reg_dt     , author     , no     from board    where (del_dt is null       or del_dt = 'enable')                and title like '%' || ? || '%'               order by "no" desc     limit 10 offset -10
### Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
; 오류: OFFSET은 음수가 아니어야 함] with root cause
org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2676)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2366)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:356)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:496)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:413)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.execute(PgPreparedStatement.java:177)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy71.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy2/jdk.proxy2.$Proxy72.selectPagingBoards(Unknown Source)
	at kr.co.ocean.board.service.BoardServiceImpl.getBoardList(BoardServiceImpl.java:44)
	at kr.co.ocean.board.controller.BoardController.pagingList(BoardController.java:90)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at kr.co.ocean.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:69)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:16:11.687 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:11.687 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:11.688 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:16:11.689 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:16:11.693 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 181, CreateTime = 1690247771689, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@602bee37)
2023-07-25 10:16:11.694 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:16:11.694 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:16:11.694 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:16:13.891 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:13.891 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:13.892 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - {keyword=tttt, type=title, recode=0, perPageNum=10}
2023-07-25 10:16:13.892 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:16:13.896 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 182, CreateTime = 1690247773892, serialized key size = 12, serialized value size = 48, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@5b57b585)
2023-07-25 10:16:13.896 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:16:13.896 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:16:13.896 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:16:13.906 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:13.906 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:13.907 INFO  [http-nio-8080-exec-7] [k.c.o.board.controller.BoardController] - {keyword=tttt, type=title, recode=-10, perPageNum=10}
2023-07-25 10:16:13.908 INFO  [http-nio-8080-exec-7] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:16:13.911 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 183, CreateTime = 1690247773908, serialized key size = 12, serialized value size = 48, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@743266bb)
2023-07-25 10:16:13.911 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:16:13.909 ERROR [http-nio-8080-exec-7] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: 
### Error querying database.  Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
### The error may exist in file [C:\projects\ReactToyServer\target\classes\mybatis\sql\pg\board-mapper.xml]
### The error may involve kr.co.ocean.board.dao.BoardMapper.selectPagingBoards-Inline
### The error occurred while setting parameters
### SQL: select code        , title     , reg_dt     , author     , no     from board    where (del_dt is null       or del_dt = 'enable')                and title like '%' || ? || '%'               order by "no" desc     limit 10 offset -10
### Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
; 오류: OFFSET은 음수가 아니어야 함] with root cause
org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2676)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2366)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:356)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:496)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:413)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.execute(PgPreparedStatement.java:177)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy71.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy2/jdk.proxy2.$Proxy72.selectPagingBoards(Unknown Source)
	at kr.co.ocean.board.service.BoardServiceImpl.getBoardList(BoardServiceImpl.java:44)
	at kr.co.ocean.board.controller.BoardController.pagingList(BoardController.java:90)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at kr.co.ocean.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:69)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:16:13.911 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:16:13.911 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:16:27.022 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:27.022 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:27.023 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:16:27.024 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:16:27.027 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 184, CreateTime = 1690247787024, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@10f065b)
2023-07-25 10:16:27.027 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:16:27.027 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:16:27.027 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:16:28.099 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - [/detail] code: 354
2023-07-25 10:16:28.099 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - [/detail] param: {no=354}
2023-07-25 10:16:28.101 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - [/detail] voList: [BoardVO [code=null, title=sit amet metus., regDt=2024-06-01 01:11:03, detail=id,, delDt=null, updtDt=2024-06-01 01:11:03, author=Joel, no=354, test=null]]
2023-07-25 10:16:29.476 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:29.476 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:29.477 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:16:29.477 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:16:29.483 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 185, CreateTime = 1690247789477, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@3eea0a1b)
2023-07-25 10:16:29.483 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:16:29.483 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:16:29.483 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:16:32.469 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:32.469 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:32.470 INFO  [http-nio-8080-exec-2] [k.c.o.board.controller.BoardController] - {keyword=ttbnv, type=title, recode=0, perPageNum=10}
2023-07-25 10:16:32.470 INFO  [http-nio-8080-exec-2] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:16:32.474 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 186, CreateTime = 1690247792470, serialized key size = 12, serialized value size = 49, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@58f77bde)
2023-07-25 10:16:32.474 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:16:32.474 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:16:32.474 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:16:32.484 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:32.484 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:16:32.485 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - {keyword=ttbnv, type=title, recode=-10, perPageNum=10}
2023-07-25 10:16:32.485 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:16:32.487 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 187, CreateTime = 1690247792485, serialized key size = 12, serialized value size = 49, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@3f97c9c5)
2023-07-25 10:16:32.488 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:16:32.488 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:16:32.488 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:16:32.486 ERROR [http-nio-8080-exec-3] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: 
### Error querying database.  Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
### The error may exist in file [C:\projects\ReactToyServer\target\classes\mybatis\sql\pg\board-mapper.xml]
### The error may involve kr.co.ocean.board.dao.BoardMapper.selectPagingBoards-Inline
### The error occurred while setting parameters
### SQL: select code        , title     , reg_dt     , author     , no     from board    where (del_dt is null       or del_dt = 'enable')                and title like '%' || ? || '%'               order by "no" desc     limit 10 offset -10
### Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
; 오류: OFFSET은 음수가 아니어야 함] with root cause
org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2676)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2366)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:356)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:496)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:413)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.execute(PgPreparedStatement.java:177)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy71.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy2/jdk.proxy2.$Proxy72.selectPagingBoards(Unknown Source)
	at kr.co.ocean.board.service.BoardServiceImpl.getBoardList(BoardServiceImpl.java:44)
	at kr.co.ocean.board.controller.BoardController.pagingList(BoardController.java:90)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at kr.co.ocean.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:69)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:17:35.083 INFO  [RMI TCP Connection(12)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-25 10:17:35.086 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Revoke previously assigned partitions springBoot-0
2023-07-25 10:17:35.086 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions revoked: [springBoot-0]
2023-07-25 10:17:35.086 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Member consumer-springBoot-1-d0c55e87-4841-49ea-a89f-c64470f012d2 sending LeaveGroup request to coordinator 127.0.0.1:9092 (id: 2147483647 rack: null) due to the consumer unsubscribed from all topics
2023-07-25 10:17:35.087 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 10:17:35.087 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 10:17:35.087 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Unsubscribed all topics or patterns and assigned partitions
2023-07-25 10:17:35.087 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 10:17:35.087 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 10:17:35.090 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 10:17:35.090 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 10:17:35.090 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 10:17:35.093 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.consumer for consumer-springBoot-1 unregistered
2023-07-25 10:17:35.094 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: Consumer stopped
2023-07-25 10:17:35.100 INFO  [RMI TCP Connection(12)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Pausing ProtocolHandler ["http-nio-8080"]
2023-07-25 10:17:35.100 INFO  [RMI TCP Connection(12)-127.0.0.1] [o.apache.catalina.core.StandardService] - Stopping service [Tomcat]
2023-07-25 10:17:35.101 INFO  [RMI TCP Connection(12)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2023-07-25 10:17:35.103 WARN  [RMI TCP Connection(12)-127.0.0.1] [o.a.c.loader.WebappClassLoaderBase] - The web application [ROOT] appears to have started a thread named [kafka-producer-network-thread | producer-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.3/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.3/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:141)
 app//org.apache.kafka.common.network.Selector.select(Selector.java:874)
 app//org.apache.kafka.common.network.Selector.poll(Selector.java:465)
 app//org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:560)
 app//org.apache.kafka.clients.producer.internals.Sender.runOnce(Sender.java:328)
 app//org.apache.kafka.clients.producer.internals.Sender.run(Sender.java:243)
 java.base@17.0.3/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:17:35.104 WARN  [RMI TCP Connection(12)-127.0.0.1] [o.a.c.loader.WebappClassLoaderBase] - The web application [ROOT] appears to have started a thread named [HikariPool-1 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.3/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.3/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.3/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.3/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.3/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.3/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.3/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.3/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.3/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:17:35.105 INFO  [RMI TCP Connection(12)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Stopping ProtocolHandler ["http-nio-8080"]
2023-07-25 10:17:35.108 INFO  [RMI TCP Connection(12)-127.0.0.1] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
2023-07-25 10:17:35.109 INFO  [RMI TCP Connection(12)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 10:17:35.110 INFO  [RMI TCP Connection(12)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 10:17:35.110 INFO  [RMI TCP Connection(12)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 10:17:35.110 INFO  [RMI TCP Connection(12)-127.0.0.1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.producer for producer-1 unregistered
2023-07-25 10:17:35.111 INFO  [RMI TCP Connection(12)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Shutdown initiated...
2023-07-25 10:17:35.114 INFO  [RMI TCP Connection(12)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Shutdown completed.
2023-07-25 10:17:36.645 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Starting ReactToyServerApplication using Java 17.0.3 with PID 13864 (C:\projects\ReactToyServer\target\classes started by ocean in C:\projects\ReactToyServer)
2023-07-25 10:17:36.647 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - No active profile set, falling back to 1 default profile: "default"
2023-07-25 10:17:37.433 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8080 (http)
2023-07-25 10:17:37.438 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8080"]
2023-07-25 10:17:37.439 INFO  [main] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-25 10:17:37.440 INFO  [main] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.10]
2023-07-25 10:17:37.539 INFO  [main] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-25 10:17:37.540 INFO  [main] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 865 ms
2023-07-25 10:17:37.931 INFO  [main] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@48567727, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@10e9a5fe, org.springframework.security.web.context.SecurityContextHolderFilter@6bce4140, org.springframework.security.web.header.HeaderWriterFilter@22f8adc2, org.springframework.web.filter.CorsFilter@259287ac, org.springframework.security.web.authentication.logout.LogoutFilter@59328218, kr.co.ocean.jwt.JwtAuthenticationFilter@1abcd059, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5882b202, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@65f3e805, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@61a87366, org.springframework.security.web.session.SessionManagementFilter@207dd1b7, org.springframework.security.web.access.ExceptionTranslationFilter@230232b0, org.springframework.security.web.access.intercept.AuthorizationFilter@5ac044ef]
2023-07-25 10:17:38.110 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8080"]
2023-07-25 10:17:38.122 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8080 (http) with context path ''
2023-07-25 10:17:38.150 INFO  [main] [o.a.k.clients.consumer.ConsumerConfig] - ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.include.jmx.reporter = true
	auto.offset.reset = latest
	bootstrap.servers = [127.0.0.1:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-springBoot-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = springBoot
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.springframework.kafka.support.serializer.JsonDeserializer

2023-07-25 10:17:38.203 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 10:17:38.204 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 10:17:38.204 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690247858202
2023-07-25 10:17:38.205 INFO  [main] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Subscribed to topic(s): springBoot
2023-07-25 10:17:38.216 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Started ReactToyServerApplication in 1.919 seconds (process running for 2.266)
2023-07-25 10:17:38.410 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 10:17:38.411 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 10:17:38.412 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Discovered group coordinator 127.0.0.1:9092 (id: 2147483647 rack: null)
2023-07-25 10:17:38.413 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 10:17:38.421 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: need to re-join with the given member-id: consumer-springBoot-1-b00b7c82-4236-447c-aee6-f850103b4a72
2023-07-25 10:17:38.422 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: rebalance failed due to 'The group member needs to have a valid member id before actually entering a consumer group.' (MemberIdRequiredException)
2023-07-25 10:17:38.422 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 10:17:38.423 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully joined group with generation Generation{generationId=72, memberId='consumer-springBoot-1-b00b7c82-4236-447c-aee6-f850103b4a72', protocol='range'}
2023-07-25 10:17:38.425 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Finished assignment for group at generation 72: {consumer-springBoot-1-b00b7c82-4236-447c-aee6-f850103b4a72=Assignment(partitions=[springBoot-0])}
2023-07-25 10:17:38.428 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully synced group in generation Generation{generationId=72, memberId='consumer-springBoot-1-b00b7c82-4236-447c-aee6-f850103b4a72', protocol='range'}
2023-07-25 10:17:38.428 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Notifying assignor about the new Assignment(partitions=[springBoot-0])
2023-07-25 10:17:38.430 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Adding newly assigned partitions: springBoot-0
2023-07-25 10:17:38.436 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Setting offset for partition springBoot-0 to the committed offset FetchPosition{offset=188, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 0 rack: null)], epoch=0}}
2023-07-25 10:17:38.437 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions assigned: [springBoot-0]
2023-07-25 10:18:33.409 INFO  [http-nio-8080-exec-2] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-25 10:18:33.409 INFO  [http-nio-8080-exec-2] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-25 10:18:33.410 INFO  [http-nio-8080-exec-2] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 1 ms
2023-07-25 10:18:33.461 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:18:33.461 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:18:33.485 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=test1c, type=title, recode=0, perPageNum=10}
2023-07-25 10:18:33.485 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:18:33.492 INFO  [http-nio-8080-exec-4] [o.a.k.clients.producer.ProducerConfig] - ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = [127.0.0.1:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.springframework.kafka.support.serializer.JsonSerializer

2023-07-25 10:18:33.503 INFO  [http-nio-8080-exec-4] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-07-25 10:18:33.511 INFO  [http-nio-8080-exec-3] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Starting...
2023-07-25 10:18:33.513 INFO  [http-nio-8080-exec-4] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 10:18:33.513 INFO  [http-nio-8080-exec-4] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 10:18:33.513 INFO  [http-nio-8080-exec-4] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690247913513
2023-07-25 10:18:33.517 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 10:18:33.517 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 10:18:33.517 INFO  [kafka-producer-network-thread | producer-1] [o.a.k.c.p.internals.TransactionManager] - [Producer clientId=producer-1] ProducerId set to 3004 with epoch 0
2023-07-25 10:18:33.544 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 188, CreateTime = 1690247913517, serialized key size = 12, serialized value size = 50, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@d54c6d9)
2023-07-25 10:18:33.545 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:18:33.545 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:18:33.545 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:18:33.615 INFO  [http-nio-8080-exec-3] [com.zaxxer.hikari.pool.HikariPool] - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1ceb2039
2023-07-25 10:18:33.616 INFO  [http-nio-8080-exec-3] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Start completed.
2023-07-25 10:18:33.646 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:18:33.646 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:18:33.647 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - {keyword=test1c, type=title, recode=-10, perPageNum=10}
2023-07-25 10:18:33.647 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:18:33.650 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 189, CreateTime = 1690247913647, serialized key size = 12, serialized value size = 50, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@2fb96101)
2023-07-25 10:18:33.650 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:18:33.650 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:18:33.650 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:18:33.681 ERROR [http-nio-8080-exec-6] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: 
### Error querying database.  Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
### The error may exist in file [C:\projects\ReactToyServer\target\classes\mybatis\sql\pg\board-mapper.xml]
### The error may involve kr.co.ocean.board.dao.BoardMapper.selectPagingBoards-Inline
### The error occurred while setting parameters
### SQL: select code        , title     , reg_dt     , author     , no     from board    where (del_dt is null       or del_dt = 'enable')                and title like '%' || ? || '%'               order by "no" desc     limit 10 offset -10
### Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
; 오류: OFFSET은 음수가 아니어야 함] with root cause
org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2676)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2366)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:356)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:496)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:413)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.execute(PgPreparedStatement.java:177)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy71.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy2/jdk.proxy2.$Proxy72.selectPagingBoards(Unknown Source)
	at kr.co.ocean.board.service.BoardServiceImpl.getBoardList(BoardServiceImpl.java:44)
	at kr.co.ocean.board.controller.BoardController.pagingList(BoardController.java:90)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at kr.co.ocean.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:69)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:18:42.979 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:18:42.979 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:18:42.981 INFO  [http-nio-8080-exec-1] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:18:42.981 INFO  [http-nio-8080-exec-1] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:18:42.985 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 190, CreateTime = 1690247922981, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@a063837)
2023-07-25 10:18:42.985 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:18:42.985 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:18:42.985 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:18:44.895 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:18:44.895 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:18:44.896 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=vb, type=title, recode=0, perPageNum=10}
2023-07-25 10:18:44.896 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:18:44.899 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 191, CreateTime = 1690247924896, serialized key size = 12, serialized value size = 46, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@6ed82246)
2023-07-25 10:18:44.899 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:18:44.900 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:18:44.900 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:18:44.911 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:18:44.911 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:18:44.912 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - {keyword=vb, type=title, recode=-10, perPageNum=10}
2023-07-25 10:18:44.912 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:18:44.916 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 192, CreateTime = 1690247924913, serialized key size = 12, serialized value size = 46, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@47e36d0)
2023-07-25 10:18:44.916 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:18:44.916 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:18:44.916 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:18:44.916 ERROR [http-nio-8080-exec-6] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: 
### Error querying database.  Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
### The error may exist in file [C:\projects\ReactToyServer\target\classes\mybatis\sql\pg\board-mapper.xml]
### The error may involve kr.co.ocean.board.dao.BoardMapper.selectPagingBoards-Inline
### The error occurred while setting parameters
### SQL: select code        , title     , reg_dt     , author     , no     from board    where (del_dt is null       or del_dt = 'enable')                and title like '%' || ? || '%'               order by "no" desc     limit 10 offset -10
### Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
; 오류: OFFSET은 음수가 아니어야 함] with root cause
org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2676)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2366)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:356)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:496)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:413)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.execute(PgPreparedStatement.java:177)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy71.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy2/jdk.proxy2.$Proxy72.selectPagingBoards(Unknown Source)
	at kr.co.ocean.board.service.BoardServiceImpl.getBoardList(BoardServiceImpl.java:44)
	at kr.co.ocean.board.controller.BoardController.pagingList(BoardController.java:90)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at kr.co.ocean.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:69)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:19:09.721 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:19:09.721 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:19:09.722 INFO  [http-nio-8080-exec-1] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:19:09.722 INFO  [http-nio-8080-exec-1] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:19:09.726 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 193, CreateTime = 1690247949722, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@602bee37)
2023-07-25 10:19:09.726 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:19:09.726 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:19:09.726 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:19:11.766 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:19:11.766 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:19:11.767 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=vv, type=title, recode=0, perPageNum=10}
2023-07-25 10:19:11.767 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:19:11.770 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 194, CreateTime = 1690247951767, serialized key size = 12, serialized value size = 46, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@5b57b585)
2023-07-25 10:19:11.771 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:19:11.771 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:19:11.771 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:19:11.778 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:19:11.779 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:19:11.780 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - {keyword=vv, type=title, recode=-10, perPageNum=10}
2023-07-25 10:19:11.780 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:19:11.783 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 195, CreateTime = 1690247951780, serialized key size = 12, serialized value size = 46, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@743266bb)
2023-07-25 10:19:11.783 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:19:11.783 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:19:11.783 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:19:11.782 ERROR [http-nio-8080-exec-6] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: 
### Error querying database.  Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
### The error may exist in file [C:\projects\ReactToyServer\target\classes\mybatis\sql\pg\board-mapper.xml]
### The error may involve kr.co.ocean.board.dao.BoardMapper.selectPagingBoards-Inline
### The error occurred while setting parameters
### SQL: select code        , title     , reg_dt     , author     , no     from board    where (del_dt is null       or del_dt = 'enable')                and title like '%' || ? || '%'               order by "no" desc     limit 10 offset -10
### Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
; 오류: OFFSET은 음수가 아니어야 함] with root cause
org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2676)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2366)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:356)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:496)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:413)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.execute(PgPreparedStatement.java:177)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy71.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy2/jdk.proxy2.$Proxy72.selectPagingBoards(Unknown Source)
	at kr.co.ocean.board.service.BoardServiceImpl.getBoardList(BoardServiceImpl.java:44)
	at kr.co.ocean.board.controller.BoardController.pagingList(BoardController.java:90)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at kr.co.ocean.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:69)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:20:42.987 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:20:42.988 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:20:42.990 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:20:42.990 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:20:42.993 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 196, CreateTime = 1690248042990, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@10f065b)
2023-07-25 10:20:42.993 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:20:42.993 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:20:42.993 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:20:44.222 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:20:44.222 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:20:44.223 INFO  [http-nio-8080-exec-1] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:20:44.223 INFO  [http-nio-8080-exec-1] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:20:44.226 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 197, CreateTime = 1690248044224, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@3eea0a1b)
2023-07-25 10:20:44.226 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:20:44.226 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:20:44.226 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:20:47.282 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - [/detail] code: 446
2023-07-25 10:20:47.282 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - [/detail] param: {no=446}
2023-07-25 10:20:47.284 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - [/detail] voList: [BoardVO [code=null, title=trtdfg, regDt=2023-07-17 17:38:56, detail=gsdfgdfgsdfg, delDt=null, updtDt=2023-07-17 17:38:56, author=곽성상, no=446, test=null]]
2023-07-25 10:20:48.804 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - [/detail] code: 446
2023-07-25 10:20:48.804 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - [/detail] param: {no=446}
2023-07-25 10:20:48.806 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - [/detail] voList: [BoardVO [code=null, title=trtdfg, regDt=2023-07-17 17:38:56, detail=gsdfgdfgsdfg, delDt=null, updtDt=2023-07-17 17:38:56, author=곽성상, no=446, test=null]]
2023-07-25 10:20:55.674 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:20:55.674 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:20:55.675 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:20:55.676 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:20:55.679 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 198, CreateTime = 1690248055676, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@58f77bde)
2023-07-25 10:20:55.679 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:20:55.679 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:20:55.679 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:20:58.398 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:20:58.398 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:20:58.399 INFO  [http-nio-8080-exec-1] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:20:58.399 INFO  [http-nio-8080-exec-1] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:20:58.403 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 199, CreateTime = 1690248058399, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@3f97c9c5)
2023-07-25 10:20:58.403 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:20:58.403 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:20:58.403 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:21:05.366 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - [/detail] code: 446
2023-07-25 10:21:05.367 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - [/detail] param: {no=446}
2023-07-25 10:21:05.368 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - [/detail] voList: [BoardVO [code=null, title=trtdfg, regDt=2023-07-17 17:38:56, detail=gsdfgdfgsdfg, delDt=null, updtDt=2023-07-17 17:38:56, author=곽성상, no=446, test=null]]
2023-07-25 10:21:08.333 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - [/detail] code: 446
2023-07-25 10:21:08.334 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - [/detail] param: {no=446}
2023-07-25 10:21:08.335 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - [/detail] voList: [BoardVO [code=null, title=trtdfg, regDt=2023-07-17 17:38:56, detail=gsdfgdfgsdfg, delDt=null, updtDt=2023-07-17 17:38:56, author=곽성상, no=446, test=null]]
2023-07-25 10:21:13.124 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:21:13.124 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:21:13.125 INFO  [http-nio-8080-exec-7] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:21:13.125 INFO  [http-nio-8080-exec-7] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:21:13.129 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 200, CreateTime = 1690248073125, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@46d32db2)
2023-07-25 10:21:13.130 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:21:13.130 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:21:13.130 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:21:15.373 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:21:15.373 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:21:15.374 INFO  [http-nio-8080-exec-2] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:21:15.374 INFO  [http-nio-8080-exec-2] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:21:15.379 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 201, CreateTime = 1690248075374, serialized key size = 12, serialized value size = 44, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@28874da1)
2023-07-25 10:21:15.379 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:21:15.379 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:21:15.379 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:21:18.912 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:21:18.912 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:21:18.914 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=1, type=title, recode=0, perPageNum=10}
2023-07-25 10:21:18.914 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:21:18.917 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 202, CreateTime = 1690248078914, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@4b4dfae4)
2023-07-25 10:21:18.918 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:21:18.918 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:21:18.918 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:21:24.825 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:21:24.825 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:21:24.826 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - {keyword=2, type=title, recode=0, perPageNum=10}
2023-07-25 10:21:24.827 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:21:24.831 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 203, CreateTime = 1690248084827, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@120fe5cc)
2023-07-25 10:21:24.832 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:21:24.832 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:21:24.832 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:21:24.840 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:21:24.840 INFO  [http-nio-8080-exec-9] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:21:24.841 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - {keyword=2, type=title, recode=-10, perPageNum=10}
2023-07-25 10:21:24.841 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:21:24.843 ERROR [http-nio-8080-exec-9] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: 
### Error querying database.  Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
### The error may exist in file [C:\projects\ReactToyServer\target\classes\mybatis\sql\pg\board-mapper.xml]
### The error may involve kr.co.ocean.board.dao.BoardMapper.selectPagingBoards-Inline
### The error occurred while setting parameters
### SQL: select code        , title     , reg_dt     , author     , no     from board    where (del_dt is null       or del_dt = 'enable')                and title like '%' || ? || '%'               order by "no" desc     limit 10 offset -10
### Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
; 오류: OFFSET은 음수가 아니어야 함] with root cause
org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2676)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2366)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:356)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:496)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:413)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.execute(PgPreparedStatement.java:177)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at jdk.internal.reflect.GeneratedMethodAccessor19.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy71.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy2/jdk.proxy2.$Proxy72.selectPagingBoards(Unknown Source)
	at kr.co.ocean.board.service.BoardServiceImpl.getBoardList(BoardServiceImpl.java:44)
	at kr.co.ocean.board.controller.BoardController.pagingList(BoardController.java:90)
	at jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at kr.co.ocean.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:69)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:21:24.844 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 204, CreateTime = 1690248084841, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@511496ff)
2023-07-25 10:21:24.844 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:21:24.844 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:21:24.844 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:24:15.466 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-25 10:24:15.481 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Revoke previously assigned partitions springBoot-0
2023-07-25 10:24:15.482 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions revoked: [springBoot-0]
2023-07-25 10:24:15.482 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Member consumer-springBoot-1-b00b7c82-4236-447c-aee6-f850103b4a72 sending LeaveGroup request to coordinator 127.0.0.1:9092 (id: 2147483647 rack: null) due to the consumer unsubscribed from all topics
2023-07-25 10:24:15.483 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 10:24:15.483 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 10:24:15.483 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Unsubscribed all topics or patterns and assigned partitions
2023-07-25 10:24:15.491 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 10:24:15.491 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 10:24:15.530 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 10:24:15.534 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 10:24:15.534 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 10:24:15.538 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.consumer for consumer-springBoot-1 unregistered
2023-07-25 10:24:15.539 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: Consumer stopped
2023-07-25 10:24:15.558 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Pausing ProtocolHandler ["http-nio-8080"]
2023-07-25 10:24:15.558 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.apache.catalina.core.StandardService] - Stopping service [Tomcat]
2023-07-25 10:24:15.571 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2023-07-25 10:24:15.579 WARN  [RMI TCP Connection(16)-127.0.0.1] [o.a.c.loader.WebappClassLoaderBase] - The web application [ROOT] appears to have started a thread named [kafka-producer-network-thread | producer-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.3/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.3/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:141)
 app//org.apache.kafka.common.network.Selector.select(Selector.java:874)
 app//org.apache.kafka.common.network.Selector.poll(Selector.java:465)
 app//org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:560)
 app//org.apache.kafka.clients.producer.internals.Sender.runOnce(Sender.java:328)
 app//org.apache.kafka.clients.producer.internals.Sender.run(Sender.java:243)
 java.base@17.0.3/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:24:15.586 WARN  [RMI TCP Connection(16)-127.0.0.1] [o.a.c.loader.WebappClassLoaderBase] - The web application [ROOT] appears to have started a thread named [HikariPool-1 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.3/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.3/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.3/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.3/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.3/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.3/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.3/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.3/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.3/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:24:15.588 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Stopping ProtocolHandler ["http-nio-8080"]
2023-07-25 10:24:15.596 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Destroying ProtocolHandler ["http-nio-8080"]
2023-07-25 10:24:15.599 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
2023-07-25 10:24:15.602 INFO  [RMI TCP Connection(16)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 10:24:15.602 INFO  [RMI TCP Connection(16)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 10:24:15.602 INFO  [RMI TCP Connection(16)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 10:24:15.602 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.producer for producer-1 unregistered
2023-07-25 10:24:15.603 INFO  [RMI TCP Connection(16)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Shutdown initiated...
2023-07-25 10:24:15.628 INFO  [RMI TCP Connection(16)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Shutdown completed.
2023-07-25 10:24:17.621 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Starting ReactToyServerApplication using Java 17.0.3 with PID 10028 (C:\projects\ReactToyServer\target\classes started by ocean in C:\projects\ReactToyServer)
2023-07-25 10:24:17.622 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - No active profile set, falling back to 1 default profile: "default"
2023-07-25 10:24:18.322 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8080 (http)
2023-07-25 10:24:18.327 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-8080"]
2023-07-25 10:24:18.329 INFO  [main] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-25 10:24:18.329 INFO  [main] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.10]
2023-07-25 10:24:18.391 INFO  [main] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-25 10:24:18.391 INFO  [main] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 741 ms
2023-07-25 10:24:18.781 INFO  [main] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@28daf506, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4662752a, org.springframework.security.web.context.SecurityContextHolderFilter@164d01ba, org.springframework.security.web.header.HeaderWriterFilter@24197b13, org.springframework.web.filter.CorsFilter@693f2213, org.springframework.security.web.authentication.logout.LogoutFilter@2b441e56, kr.co.ocean.jwt.JwtAuthenticationFilter@514377fc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5ac044ef, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@10e9a5fe, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2e4eda17, org.springframework.security.web.session.SessionManagementFilter@760f1081, org.springframework.security.web.access.ExceptionTranslationFilter@2b7facc7, org.springframework.security.web.access.intercept.AuthorizationFilter@1cde374]
2023-07-25 10:24:18.954 INFO  [main] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-8080"]
2023-07-25 10:24:18.966 INFO  [main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8080 (http) with context path ''
2023-07-25 10:24:18.994 INFO  [main] [o.a.k.clients.consumer.ConsumerConfig] - ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.include.jmx.reporter = true
	auto.offset.reset = latest
	bootstrap.servers = [127.0.0.1:9092]
	check.crcs = true
	client.dns.lookup = use_all_dns_ips
	client.id = consumer-springBoot-1
	client.rack = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = false
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = springBoot
	group.instance.id = null
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	internal.throw.on.fetch.stable.offset.unsupported = false
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor, class org.apache.kafka.clients.consumer.CooperativeStickyAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	session.timeout.ms = 45000
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.springframework.kafka.support.serializer.JsonDeserializer

2023-07-25 10:24:19.047 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 10:24:19.048 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 10:24:19.048 INFO  [main] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690248259046
2023-07-25 10:24:19.050 INFO  [main] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Subscribed to topic(s): springBoot
2023-07-25 10:24:19.060 INFO  [main] [kr.co.ocean.ReactToyServerApplication] - Started ReactToyServerApplication in 1.807 seconds (process running for 2.164)
2023-07-25 10:24:19.256 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 10:24:19.258 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.Metadata] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 10:24:19.258 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Discovered group coordinator 127.0.0.1:9092 (id: 2147483647 rack: null)
2023-07-25 10:24:19.260 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 10:24:19.268 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: need to re-join with the given member-id: consumer-springBoot-1-6839a5be-cafb-4f27-990e-c9ba4c6aa7cc
2023-07-25 10:24:19.268 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: rebalance failed due to 'The group member needs to have a valid member id before actually entering a consumer group.' (MemberIdRequiredException)
2023-07-25 10:24:19.268 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] (Re-)joining group
2023-07-25 10:24:19.270 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully joined group with generation Generation{generationId=74, memberId='consumer-springBoot-1-6839a5be-cafb-4f27-990e-c9ba4c6aa7cc', protocol='range'}
2023-07-25 10:24:19.272 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Finished assignment for group at generation 74: {consumer-springBoot-1-6839a5be-cafb-4f27-990e-c9ba4c6aa7cc=Assignment(partitions=[springBoot-0])}
2023-07-25 10:24:19.275 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Successfully synced group in generation Generation{generationId=74, memberId='consumer-springBoot-1-6839a5be-cafb-4f27-990e-c9ba4c6aa7cc', protocol='range'}
2023-07-25 10:24:19.276 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Notifying assignor about the new Assignment(partitions=[springBoot-0])
2023-07-25 10:24:19.277 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Adding newly assigned partitions: springBoot-0
2023-07-25 10:24:19.283 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Setting offset for partition springBoot-0 to the committed offset FetchPosition{offset=205, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=Optional[127.0.0.1:9092 (id: 0 rack: null)], epoch=0}}
2023-07-25 10:24:19.284 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions assigned: [springBoot-0]
2023-07-25 10:24:32.404 INFO  [http-nio-8080-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-25 10:24:32.404 INFO  [http-nio-8080-exec-1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-25 10:24:32.405 INFO  [http-nio-8080-exec-1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 1 ms
2023-07-25 10:24:32.454 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:24:32.454 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:24:32.479 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - {keyword=2, type=title, recode=0, perPageNum=10}
2023-07-25 10:24:32.479 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:24:32.486 INFO  [http-nio-8080-exec-3] [o.a.k.clients.producer.ProducerConfig] - ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 16384
	bootstrap.servers = [127.0.0.1:9092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.springframework.kafka.support.serializer.JsonSerializer

2023-07-25 10:24:32.493 INFO  [http-nio-8080-exec-3] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Instantiated an idempotent producer.
2023-07-25 10:24:32.504 INFO  [http-nio-8080-exec-4] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Starting...
2023-07-25 10:24:32.505 INFO  [http-nio-8080-exec-3] [o.a.kafka.common.utils.AppInfoParser] - Kafka version: 3.4.1
2023-07-25 10:24:32.505 INFO  [http-nio-8080-exec-3] [o.a.kafka.common.utils.AppInfoParser] - Kafka commitId: 8a516edc2755df89
2023-07-25 10:24:32.505 INFO  [http-nio-8080-exec-3] [o.a.kafka.common.utils.AppInfoParser] - Kafka startTimeMs: 1690248272505
2023-07-25 10:24:32.509 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Resetting the last seen epoch of partition springBoot-0 to 0 since the associated topicId changed from null to TVGPiFNrQ9SSz0pvUCaTmg
2023-07-25 10:24:32.510 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.Metadata] - [Producer clientId=producer-1] Cluster ID: B4anUJ1FShmT32vaVUGnlg
2023-07-25 10:24:32.510 INFO  [kafka-producer-network-thread | producer-1] [o.a.k.c.p.internals.TransactionManager] - [Producer clientId=producer-1] ProducerId set to 3005 with epoch 0
2023-07-25 10:24:32.540 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 205, CreateTime = 1690248272510, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@6b4877b2)
2023-07-25 10:24:32.540 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:24:32.540 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:24:32.540 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:24:32.611 INFO  [http-nio-8080-exec-4] [com.zaxxer.hikari.pool.HikariPool] - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@569208a
2023-07-25 10:24:32.612 INFO  [http-nio-8080-exec-4] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Start completed.
2023-07-25 10:24:32.644 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:24:32.644 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:24:32.645 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - {keyword=2, type=title, recode=-10, perPageNum=10}
2023-07-25 10:24:32.645 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:24:32.648 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 206, CreateTime = 1690248272645, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@80bea5)
2023-07-25 10:24:32.648 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:24:32.648 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:24:32.648 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:24:32.679 ERROR [http-nio-8080-exec-6] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: 
### Error querying database.  Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
### The error may exist in file [C:\projects\ReactToyServer\target\classes\mybatis\sql\pg\board-mapper.xml]
### The error may involve kr.co.ocean.board.dao.BoardMapper.selectPagingBoards-Inline
### The error occurred while setting parameters
### SQL: select code        , title     , reg_dt     , author     , no     from board    where (del_dt is null       or del_dt = 'enable')                and title like '%' || ? || '%'               order by "no" desc     limit 10 offset -10
### Cause: org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
; 오류: OFFSET은 음수가 아니어야 함] with root cause
org.postgresql.util.PSQLException: 오류: OFFSET은 음수가 아니어야 함
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2676)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2366)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:356)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:496)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:413)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.execute(PgPreparedStatement.java:177)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy71.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy2/jdk.proxy2.$Proxy72.selectPagingBoards(Unknown Source)
	at kr.co.ocean.board.service.BoardServiceImpl.getBoardList(BoardServiceImpl.java:44)
	at kr.co.ocean.board.controller.BoardController.pagingList(BoardController.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at kr.co.ocean.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:69)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-25 10:31:25.667 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:31:25.667 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:31:25.669 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:31:25.669 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:31:28.346 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:31:28.346 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:31:28.348 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - {keyword=0, type=title, recode=0, perPageNum=10}
2023-07-25 10:31:28.348 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:31:28.351 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 207, CreateTime = 1690248688348, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@54f05959)
2023-07-25 10:31:28.352 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:31:28.352 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:31:28.352 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:31:28.363 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:04.334 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:04.334 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:04.337 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=0, type=title, recode=0, perPageNum=10}
2023-07-25 10:33:04.337 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:33:04.343 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 208, CreateTime = 1690248784337, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@900ba9b)
2023-07-25 10:33:04.344 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:33:04.344 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:33:04.344 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:33:13.283 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:13.283 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:13.284 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - {keyword=4, type=title, recode=0, perPageNum=10}
2023-07-25 10:33:13.284 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:33:13.287 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 209, CreateTime = 1690248793285, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@cf05888)
2023-07-25 10:33:13.288 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:33:13.288 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:33:13.288 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:33:14.377 INFO  [http-nio-8080-exec-9] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:14.378 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:14.378 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - {keyword=4, type=title, recode=0, perPageNum=10}
2023-07-25 10:33:14.378 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:33:14.381 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 210, CreateTime = 1690248794378, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@7c2a1a61)
2023-07-25 10:33:14.381 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:33:14.382 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:33:14.382 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:33:14.833 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:14.833 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:14.835 INFO  [http-nio-8080-exec-2] [k.c.o.board.controller.BoardController] - {keyword=4, type=title, recode=0, perPageNum=10}
2023-07-25 10:33:14.835 INFO  [http-nio-8080-exec-2] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:33:14.838 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 211, CreateTime = 1690248794835, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@2a46ae2c)
2023-07-25 10:33:14.838 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:33:14.838 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:33:14.838 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:33:15.000 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:15.000 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:15.001 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=4, type=title, recode=0, perPageNum=10}
2023-07-25 10:33:15.001 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:33:15.004 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 212, CreateTime = 1690248795002, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@269e0d9d)
2023-07-25 10:33:15.004 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:33:15.004 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:33:15.005 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:33:19.631 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.clients.NetworkClient] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Node -1 disconnected.
2023-07-25 10:33:45.004 INFO  [kafka-producer-network-thread | producer-1] [org.apache.kafka.clients.NetworkClient] - [Producer clientId=producer-1] Node -1 disconnected.
2023-07-25 10:33:52.611 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:52.611 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:33:52.612 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - {keyword=4, type=title, recode=0, perPageNum=10}
2023-07-25 10:33:52.612 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 10:33:52.615 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 213, CreateTime = 1690248832612, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@70a53d8)
2023-07-25 10:33:52.615 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [116, 106, 100, 116, 107, 100, 51, 56, 54, 57])
2023-07-25 10:33:52.615 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:33:52.615 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: tjdtkd3869
2023-07-25 10:34:07.431 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:34:07.431 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:34:07.432 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 10:34:07.432 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:34:09.060 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:34:09.060 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:34:09.061 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:34:09.061 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:34:09.064 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 214, CreateTime = 1690248849061, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@3725df79)
2023-07-25 10:34:09.064 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:34:09.064 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:34:09.064 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:47.891 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:47.891 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:47.892 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:47.892 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:47.894 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 215, CreateTime = 1690248947892, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@5dc9428b)
2023-07-25 10:35:47.895 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:47.895 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:47.895 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:48.155 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.155 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.156 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:48.157 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:48.160 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 216, CreateTime = 1690248948157, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@74f87e91)
2023-07-25 10:35:48.160 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:48.160 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:48.160 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:48.307 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.307 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.308 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:48.308 INFO  [http-nio-8080-exec-6] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:48.311 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 217, CreateTime = 1690248948308, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@21397745)
2023-07-25 10:35:48.311 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:48.311 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:48.311 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:48.426 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.426 INFO  [http-nio-8080-exec-9] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.428 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:48.428 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:48.431 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 218, CreateTime = 1690248948428, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@387eba0c)
2023-07-25 10:35:48.431 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:48.431 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:48.431 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:48.578 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.578 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.579 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:48.579 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:48.582 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 219, CreateTime = 1690248948580, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@2fb46a92)
2023-07-25 10:35:48.582 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:48.582 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:48.582 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:48.699 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.699 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.700 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:48.700 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:48.704 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 220, CreateTime = 1690248948700, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@78968b4f)
2023-07-25 10:35:48.704 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:48.704 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:48.704 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:48.852 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.852 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.853 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:48.853 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:48.856 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 221, CreateTime = 1690248948853, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@a042304)
2023-07-25 10:35:48.856 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:48.856 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:48.856 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:48.993 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.993 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:48.994 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:48.994 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:48.996 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 222, CreateTime = 1690248948994, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@5734733f)
2023-07-25 10:35:48.997 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:48.997 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:48.997 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:49.123 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.123 INFO  [http-nio-8080-exec-9] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.124 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:49.124 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:49.128 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 223, CreateTime = 1690248949124, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@2bb8a960)
2023-07-25 10:35:49.128 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:49.128 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:49.128 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:49.282 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.282 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.283 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:49.283 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:49.285 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 224, CreateTime = 1690248949283, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@673893ab)
2023-07-25 10:35:49.285 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:49.285 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:49.286 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:49.434 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.434 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.435 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:49.435 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:49.438 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 225, CreateTime = 1690248949435, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@4c0f804b)
2023-07-25 10:35:49.438 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:49.438 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:49.438 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:49.571 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.571 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.572 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:49.572 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:49.575 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 226, CreateTime = 1690248949572, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@38d6af7e)
2023-07-25 10:35:49.575 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:49.575 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:49.575 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:49.723 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.723 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.724 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:49.724 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:49.727 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 227, CreateTime = 1690248949724, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@56cbf2ad)
2023-07-25 10:35:49.727 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:49.727 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:49.727 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:49.867 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.867 INFO  [http-nio-8080-exec-9] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:49.867 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:49.867 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:49.870 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 228, CreateTime = 1690248949867, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@75cd8614)
2023-07-25 10:35:49.870 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:49.870 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:49.870 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:50.003 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.003 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.004 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:50.004 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:50.007 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 229, CreateTime = 1690248950004, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@45f05d3e)
2023-07-25 10:35:50.007 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:50.007 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:50.007 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:50.147 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.147 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.148 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:50.148 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:50.151 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 230, CreateTime = 1690248950148, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@48d0a7a1)
2023-07-25 10:35:50.151 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:50.151 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:50.151 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:50.297 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.297 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.297 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:50.297 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:50.300 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 231, CreateTime = 1690248950298, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@41077a8c)
2023-07-25 10:35:50.300 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:50.300 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:50.301 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:50.433 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.433 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.433 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:50.433 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:50.436 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 232, CreateTime = 1690248950433, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@58e3a99e)
2023-07-25 10:35:50.436 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:50.436 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:50.436 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:50.569 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.569 INFO  [http-nio-8080-exec-9] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.570 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:50.570 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:50.573 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 233, CreateTime = 1690248950570, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@1f3d1611)
2023-07-25 10:35:50.573 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:50.573 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:50.573 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:50.706 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.706 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.707 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:50.707 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:50.710 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 234, CreateTime = 1690248950707, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@529d47f8)
2023-07-25 10:35:50.710 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:50.710 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:50.710 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:50.841 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.841 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.843 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:50.843 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:50.845 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 235, CreateTime = 1690248950843, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@2834943d)
2023-07-25 10:35:50.846 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:50.846 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:50.846 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 10:35:50.978 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.978 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 10:35:50.979 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - {keyword=6, type=title, recode=0, perPageNum=10}
2023-07-25 10:35:50.979 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 10:35:50.982 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - record: ConsumerRecord(topic = springBoot, partition = 0, leaderEpoch = 0, offset = 236, CreateTime = 1690248950979, serialized key size = 12, serialized value size = 45, headers = RecordHeaders(headers = [RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])], isReadOnly = false), key = serchKeyword, value = kr.co.ocean.kafka.dto.KafkaJsonDTO@6dde77fc)
2023-07-25 10:35:50.982 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header : RecordHeader(key = username, value = [113, 119, 101, 114, 49, 50, 51, 52])
2023-07-25 10:35:50.982 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header key : username
2023-07-25 10:35:50.982 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [k.co.ocean.kafka.service.ConsumerService] - header value: qwer1234
2023-07-25 14:02:22.016 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.TokenProvider] - 만료된 JWT 토큰입니다.
2023-07-25 14:02:22.016 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.TokenProvider] - 만료된 JWT 토큰입니다.
2023-07-25 14:02:22.019 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 재발급
2023-07-25 14:02:22.019 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 재발급
2023-07-25 14:02:22.042 INFO  [http-nio-8080-exec-1] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 14:02:22.042 INFO  [http-nio-8080-exec-4] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 14:02:22.050 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 14:02:22.050 INFO  [http-nio-8080-exec-4] [k.c.o.board.controller.BoardController] - tjdtkd3869
2023-07-25 15:11:12.786 INFO  [http-nio-8080-exec-9] [kr.co.ocean.jwt.TokenProvider] - 만료된 JWT 토큰입니다.
2023-07-25 15:11:12.786 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.TokenProvider] - 만료된 JWT 토큰입니다.
2023-07-25 15:11:12.787 INFO  [http-nio-8080-exec-9] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 재발급
2023-07-25 15:11:12.787 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 재발급
2023-07-25 15:11:12.795 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:11:12.795 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:11:12.797 INFO  [http-nio-8080-exec-2] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 15:11:12.797 INFO  [http-nio-8080-exec-2] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 15:12:26.914 INFO  [http-nio-8080-exec-8] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:12:26.914 INFO  [http-nio-8080-exec-6] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:12:26.915 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 15:12:26.915 INFO  [http-nio-8080-exec-8] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 15:13:19.863 INFO  [http-nio-8080-exec-2] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:13:19.863 INFO  [http-nio-8080-exec-10] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:13:19.865 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 15:13:19.865 INFO  [http-nio-8080-exec-10] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 15:14:05.422 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:14:05.422 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:14:05.423 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 15:14:05.423 INFO  [http-nio-8080-exec-5] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 15:14:10.758 INFO  [http-nio-8080-exec-9] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:14:10.758 INFO  [http-nio-8080-exec-7] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:14:10.759 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 15:14:10.759 INFO  [http-nio-8080-exec-9] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 15:16:41.210 INFO  [http-nio-8080-exec-5] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:16:41.210 INFO  [http-nio-8080-exec-3] [kr.co.ocean.jwt.JwtAuthenticationFilter] - 인증성공
2023-07-25 15:16:41.211 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - {keyword=, type=, recode=0, perPageNum=10}
2023-07-25 15:16:41.211 INFO  [http-nio-8080-exec-3] [k.c.o.board.controller.BoardController] - qwer1234
2023-07-25 18:05:17.375 INFO  [RMI TCP Connection(471)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-25 18:05:17.424 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Revoke previously assigned partitions springBoot-0
2023-07-25 18:05:17.426 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: partitions revoked: [springBoot-0]
2023-07-25 18:05:17.427 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Member consumer-springBoot-1-6839a5be-cafb-4f27-990e-c9ba4c6aa7cc sending LeaveGroup request to coordinator 127.0.0.1:9092 (id: 2147483647 rack: null) due to the consumer unsubscribed from all topics
2023-07-25 18:05:17.428 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 18:05:17.428 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 18:05:17.429 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.clients.consumer.KafkaConsumer] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Unsubscribed all topics or patterns and assigned partitions
2023-07-25 18:05:17.429 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Resetting generation and member id due to: consumer pro-actively leaving the group
2023-07-25 18:05:17.429 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.k.c.c.internals.ConsumerCoordinator] - [Consumer clientId=consumer-springBoot-1, groupId=springBoot] Request joining group due to: consumer pro-actively leaving the group
2023-07-25 18:05:17.433 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 18:05:17.433 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 18:05:17.434 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 18:05:17.438 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.consumer for consumer-springBoot-1 unregistered
2023-07-25 18:05:17.439 INFO  [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1] [o.s.k.l.KafkaMessageListenerContainer] - springBoot: Consumer stopped
2023-07-25 18:05:17.451 INFO  [RMI TCP Connection(471)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Pausing ProtocolHandler ["http-nio-8080"]
2023-07-25 18:05:17.452 INFO  [RMI TCP Connection(471)-127.0.0.1] [o.apache.catalina.core.StandardService] - Stopping service [Tomcat]
2023-07-25 18:05:17.457 INFO  [RMI TCP Connection(471)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Destroying Spring FrameworkServlet 'dispatcherServlet'
2023-07-25 18:05:17.464 WARN  [RMI TCP Connection(471)-127.0.0.1] [o.a.c.loader.WebappClassLoaderBase] - The web application [ROOT] appears to have started a thread named [kafka-producer-network-thread | producer-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.3/sun.nio.ch.WEPoll.wait(Native Method)
 java.base@17.0.3/sun.nio.ch.WEPollSelectorImpl.doSelect(WEPollSelectorImpl.java:111)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:129)
 java.base@17.0.3/sun.nio.ch.SelectorImpl.select(SelectorImpl.java:141)
 app//org.apache.kafka.common.network.Selector.select(Selector.java:874)
 app//org.apache.kafka.common.network.Selector.poll(Selector.java:465)
 app//org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:560)
 app//org.apache.kafka.clients.producer.internals.Sender.runOnce(Sender.java:328)
 app//org.apache.kafka.clients.producer.internals.Sender.run(Sender.java:243)
 java.base@17.0.3/java.lang.Thread.run(Thread.java:833)
2023-07-25 18:05:17.465 WARN  [RMI TCP Connection(471)-127.0.0.1] [o.a.c.loader.WebappClassLoaderBase] - The web application [ROOT] appears to have started a thread named [HikariPool-1 housekeeper] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.3/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.3/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.3/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.3/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.3/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.3/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.3/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.3/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.3/java.lang.Thread.run(Thread.java:833)
2023-07-25 18:05:17.474 INFO  [RMI TCP Connection(471)-127.0.0.1] [o.apache.coyote.http11.Http11NioProtocol] - Stopping ProtocolHandler ["http-nio-8080"]
2023-07-25 18:05:17.481 INFO  [RMI TCP Connection(471)-127.0.0.1] [o.a.kafka.clients.producer.KafkaProducer] - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
2023-07-25 18:05:17.483 INFO  [RMI TCP Connection(471)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics scheduler closed
2023-07-25 18:05:17.483 INFO  [RMI TCP Connection(471)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2023-07-25 18:05:17.483 INFO  [RMI TCP Connection(471)-127.0.0.1] [org.apache.kafka.common.metrics.Metrics] - Metrics reporters closed
2023-07-25 18:05:17.483 INFO  [RMI TCP Connection(471)-127.0.0.1] [o.a.kafka.common.utils.AppInfoParser] - App info kafka.producer for producer-1 unregistered
2023-07-25 18:05:17.485 INFO  [RMI TCP Connection(471)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Shutdown initiated...
2023-07-25 18:05:17.490 INFO  [RMI TCP Connection(471)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - HikariPool-1 - Shutdown completed.
